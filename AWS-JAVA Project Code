PROJECT STRUCTURE

todomvc-api
├── src
│   ├── controllers
│   ├── models
│   ├── routes
│   ├── app.js
├── test
│   ├── todo.test.js
├── Dockerfile
├── docker-compose.yml
├── package.json
├── README.md

..................................................................
.src/app.js

const express = require('express');
const bodyParser = require('body-parser');
const todoRoutes = require('./routes/todoRoutes');

const app = express();
app.use(bodyParser.json());
app.use('/api/todos', todoRoutes);

app.use((err, req, res, next) => {
    res.status(err.status || 500).json({ error: err.message });
});

module.exports = app;

.......................................................................

.src/routes/todoRoutes.js

const express = require('express');
const { getTodos, getTodo, createTodo, updateTodo, deleteTodo } = require('../controllers/todoController');
const router = express.Router();

router.get('/', getTodos);
router.get('/:id', getTodo);
router.post('/', createTodo);
router.put('/:id', updateTodo);
router.delete('/:id', deleteTodo);

module.exports = router;


.........................................................................................................

src/controllers/todoController.js
javascript



const db = require('../models');

exports.getTodos = async (req, res) => {
    const todos = await db.Todo.findAll();
    res.json(todos);
};

exports.getTodo = async (req, res) => {
    const todo = await db.Todo.findByPk(req.params.id);
    todo ? res.json(todo) : res.status(404).json({ error: 'Todo not found' });
};

exports.createTodo = async (req, res) => {
    const newTodo = await db.Todo.create(req.body);
    res.status(201).json(newTodo);
};

exports.updateTodo = async (req, res) => {
    const updated = await db.Todo.update(req.body, { where: { id: req.params.id } });
    updated[0] ? res.json({ message: 'Updated successfully' }) : res.status(404).json({ error: 'Todo not found' });
};

exports.deleteTodo = async (req, res) => {
    const deleted = await db.Todo.destroy({ where: { id: req.params.id } });
    deleted ? res.json({ message: 'Deleted successfully' }) : res.status(404).json({ error: 'Todo not found' });
};

.......................................................................................................

DockerFile

FROM node:16

WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .

EXPOSE 3000
CMD ["node", "src/app.js"]

........................................................................
. Docker-compose.yml

version: '3.8'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - .:/app
    depends_on:
      - db
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: tododb
    ports:
      - "5432:5432"
........................................................................

README.md
# TodoMVC REST API

## Setup and Usage

### Prerequisites
- Docker and Docker Compose installed.

### Steps
1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd todomvc-api
..........................................................................



the implementation of the described REST API using Node.js with Express.js.

// Import required modules
const express = require('express');
const bodyParser = require('body-parser');

// Initialize Express app
const app = express();
const port = 3000;

// Middleware to parse JSON
app.use(bodyParser.json());

// In-memory database for simplicity (replaceable with a real database)
let todos = [];
let nextId = 1;

/**
 * GET /api/todos - Get all todos
 */
app.get('/api/todos', (req, res) => {
    res.status(200).json(todos);
});

/**
 * GET /api/todos/:id - Get a single todo
 */
app.get('/api/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const todo = todos.find(t => t.id === id);
    if (todo) {
        res.status(200).json(todo);
    } else {
        res.status(404).json({ error: 'Todo not found' });
    }
});

/**
 * POST /api/todos - Create a new todo
 */
app.post('/api/todos', (req, res) => {
    const { title, completed = false } = req.body;
    if (!title) {
        return res.status(400).json({ error: 'Title is required' });
    }
    const newTodo = { id: nextId++, title, completed };
    todos.push(newTodo);
    res.status(201).json(newTodo);
});

/**
 * PUT /api/todos/:id - Update an existing todo
 */
app.put('/api/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const { title, completed } = req.body;
    const todo = todos.find(t => t.id === id);

    if (!todo) {
        return res.status(404).json({ error: 'Todo not found' });
    }

    if (title !== undefined) {
        todo.title = title;
    }
    if (completed !== undefined) {
        todo.completed = completed;
    }

    res.status(200).json(todo);
});

/**
 * DELETE /api/todos/:id - Delete a todo
 */
app.delete('/api/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const index = todos.findIndex(t => t.id === id);

    if (index === -1) {
        return res.status(404).json({ error: 'Todo not found' });
    }

    todos.splice(index, 1);
    res.status(200).json({ message: 'Todo deleted successfully' });
});

// Start the server
app.listen(port, () => {
    console.log(`Todo API is running at http://localhost:${port}/api/todos`);
});
